import { useQuery } from '@tanstack/react-query'
import type { AssetItem, AssetsResponse } from '@/types'
const MESSARI_BASE = import.meta.env.VITE_MESSARI_BASE ?? 'https://data.messari.io'
const CG_BASE = import.meta.env.VITE_CG_BASE ?? 'https://api.coingecko.com'
async function fetchJSON<T>(url: string) { const res = await fetch(url); if (!res.ok) { throw new Error(`HTTP ${res.status}`) } return res.json() as Promise<T> }
export async function fetchAssets({ page, perPage }: { page: number; perPage: number }): Promise<AssetsResponse> { try { const data = await fetchJSON<any>(`${MESSARI_BASE}/api/v2/assets?limit=${perPage}&page=${page}`); const items: AssetItem[] = (data?.data || []).map((a: any) => ({ id: a.slug || a.id, slug: a.slug || a.id, symbol: a.symbol, name: a.name, iconUrl: `https://assets.coincap.io/assets/icons/${(a.symbol || 'btc').toLowerCase()}@2x.png`, priceUsd: a?.metrics?.market_data?.price_usd ?? null })); return { items, nextPage: items.length < perPage ? undefined : page + 1 } } catch { const data = await fetchJSON<any[]>(`${CG_BASE}/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${perPage}&page=${page}`); const items: AssetItem[] = data.map((c: any) => ({ id: c.id, slug: c.id, symbol: (c.symbol || '').toUpperCase(), name: c.name, iconUrl: c.image, priceUsd: c.current_price ?? null })); return { items, nextPage: items.length < perPage ? undefined : page + 1 } } }
export function useAssetsCatalog(limit: number = 50) { return useQuery({ queryKey: ['catalog', limit], queryFn: async () => { try { const data = await fetchJSON<any>(`${MESSARI_BASE}/api/v2/assets?limit=${limit}&page=1`); return (data?.data || []).map((a: any) => ({ id: a.slug || a.id, slug: a.slug || a.id, symbol: a.symbol, name: a.name, iconUrl: `https://assets.coincap.io/assets/icons/${(a.symbol || 'btc').toLowerCase()}@2x.png`, priceUsd: a?.metrics?.market_data?.price_usd ?? null })) as AssetItem[] } catch { const data = await fetchJSON<any[]>(`${CG_BASE}/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${limit}&page=1`); return data.map((c: any) => ({ id: c.id, slug: c.id, symbol: (c.symbol || '').toUpperCase(), name: c.name, iconUrl: c.image, priceUsd: c.current_price ?? null })) as AssetItem[] } } }) }
export function usePrice(assetId: string) { return useQuery({ queryKey: ['price', assetId], queryFn: async () => { try { const d = await fetchJSON<any>(`${MESSARI_BASE}/api/v1/assets/${assetId}/metrics`); const p = d?.data?.market_data?.price_usd; if (typeof p === 'number') return p as number; throw new Error('no price') } catch { const d = await fetchJSON<any>(`${CG_BASE}/api/v3/simple/price?ids=${encodeURIComponent(assetId)}&vs_currencies=usd`); const p = d?.[assetId]?.usd; if (typeof p !== 'number') throw new Error('no price'); return p as number } } }) }